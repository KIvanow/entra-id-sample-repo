import { AuthenticationResult } from '@azure/msal-common/node';
import { BasicAuth, StreamingCredentialsProvider, IdentityProvider, TokenManager, ReAuthenticationError, StreamingCredentialsListener, Disposable } from '@redis/client/dist/lib/authx';
/**
 * A streaming credentials provider that uses the Entraid identity provider to provide credentials.
 * Please use one of the factory functions in `entraid-credetfactories.ts` to create an instance of this class for the different
 * type of authentication flows.
 */
export declare class EntraidCredentialsProvider implements StreamingCredentialsProvider {
    #private;
    readonly tokenManager: TokenManager<AuthenticationResult>;
    readonly idp: IdentityProvider<AuthenticationResult>;
    private readonly options;
    readonly type = "streaming-credentials-provider";
    constructor(tokenManager: TokenManager<AuthenticationResult>, idp: IdentityProvider<AuthenticationResult>, options?: {
        onReAuthenticationError?: (error: ReAuthenticationError) => void;
        credentialsMapper?: (token: AuthenticationResult) => BasicAuth;
        onRetryableError?: (error: string) => void;
    });
    subscribe(listener: StreamingCredentialsListener<BasicAuth>): Promise<[BasicAuth, Disposable]>;
    onReAuthenticationError: (error: ReAuthenticationError) => void;
    hasActiveSubscriptions(): boolean;
    getSubscriptionsCount(): number;
    getTokenManager(): TokenManager<AuthenticationResult>;
    getCurrentCredentials(): BasicAuth | null;
}
//# sourceMappingURL=entraid-credentials-provider.d.ts.map